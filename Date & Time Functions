-- sql date functions

use database "DEMO_DATABASE";

alter session set timestamp_type_mapping = timestamp_ntz;

create or replace table ts_test(ts timestamp);

desc table ts_test;

create or replace table ts_test(ts timestamp_ltz);

alter session set timezone = 'America/Los_Angeles';

insert into ts_test values('2014-01-01 16:00:00');
insert into ts_test values('2014-01-02 16:00:00 +00:00');

-- Note that the time for January 2nd is 08:00 in Los Angeles (which is 16:00 in UTC)

select * from ts_test;

select ts, hour(ts) from ts_test;

select convert_timezone('Europe/Warsaw', 'UTC', '2019-01-01 00:00:00'::timestamp_ntz) as conv;

SELECT
    months_between('2019-03-15'::date,
                   '2019-02-15'::date) as monthsbetween1,
    months_between('2019-03-31'::date,
                   '2020-02-28'::date) as monthsbetween2;

-- GET CURRENT DATE
SELECT CURRENT_DATE;

-- GET CURRENT TIME
SELECT CURRENT_TIMESTAMP;

-- GET CURRENT DATE
SELECT CURRENT_TIME;


-- CONVERT TIMEZONE
SELECT CONVERT_TIMEZONE('UTC',CURRENT_TIMESTAMP) AS UTC_TIMEZONE;


-- CONVERT DATE TO SUBSEQUENT 4 MONTHS AHEAD
SELECT ADD_MONTHS(CURRENT_DATE,4) as DATE_AFTER_4_MONTHS;

-- 3 MONTHS BACK DATE
SELECT TO_CHAR(ADD_MONTHS(CURRENT_DATE,-3),'DD-MM-YYYY') as DATE_BEFORE_3_MONTHS;
SELECT TO_VARCHAR(ADD_MONTHS(CURRENT_DATE,-3),'MM-DD-YYYY') as DATE_BEFORE_3_MONTHS;

-- GET YR FROM DATE
SELECT DATE_TRUNC('YEAR',CURRENT_DATE) AS YR_FROM_DATE;

-- GET MTH FROM DATE
SELECT DATE_TRUNC('MONTH',CURRENT_DATE) AS MTH_FROM_DATE;

-- GET DAY FROM DATE
SELECT DATE_TRUNC('DAY',CURRENT_DATE) AS DAY_FROM_DATE;

SELECT DATE_TRUNC('WEEK',CURRENT_DATE) AS WEEK_FROM_DATE;

SELECT DATE_TRUNC('QTR', CURRENT_DATE) AS QTR_FROM_DATE;

select day(current_timestamp() ) ,
  hour( current_timestamp() ) ,
  second(current_timestamp()) ,
  minute(current_timestamp()) ,
  month(current_timestamp());

SELECT WEEK(CURRENT_DATE) AS WEEK_FROM_START_OF_THE_YEAR;
SELECT MONTH(CURRENT_DATE) AS MNTH_FROM_START_OF_THE_YEAR;
SELECT DAY(CURRENT_DATE) AS MNTH_OF_CURRENT_MONTH;

-- GET LAST DAY OF current MONTH
select last_day(current_date) as last_day_curr_month;

-- GET LAST DAY OF PREVIOUS MONTH
SELECT LAST_DAY(CURRENT_DATE - INTERVAL '1 MONTH') AS LAST_DAY_PREV_MNTH;

SELECT LAST_DAY(CURRENT_DATE - INTERVAL '2 MONTH') + INTERVAL '1 DAY' AS FIRST_DAY;

SELECT QUARTER(CURRENT_DATE) AS QTR;

SELECT EXTRACT(YEAR FROM CURRENT_DATE) AS YR;
SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS MTH;
SELECT EXTRACT(DAY FROM CURRENT_DATE) AS DAY;

select QUARTER(to_date('2022-08-24'));

SELECT to_date('08-23-2022','mm-dd-yyyy');

SELECT TO_DATE('1993-08-17') AS DATE;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'DD-MM-YYYY') AS DATE_DD_MM_YYYY; --THIS WILL BE HIGHLY USED

SELECT TO_CHAR(TO_DATE('1993-08-17'),'MM-YYYY') AS MM_YYYY;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'MON-YYYY') AS MON_YYYY;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'MON-YY') AS DATE_MON_YY;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'DY') AS DATE_DAY;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'DY-DD-MM-YYYY') AS DATE_DAY;

SELECT TO_CHAR(CURRENT_DATE, '') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'DD-MM-YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'DD/MM/YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MM/DD/YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MMM-DD-YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM HELLO') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MM*DD*YY') AS formatted_date;

SELECT DAYNAME ('1993-08-23');
SELECT DAYNAME (CURRENT_DATE);

SELECT TO_CHAR(TO_DATE('1993-08-17'),'YYYY-DD') AS DATE;

SELECT TO_CHAR(TO_DATE('1993-08-17'),'DD-MM') AS DATE;

select MONTH(CURRENT_DATE);
SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS MTH;

SELECT ADD_MONTHS(CURRENT_DATE,-3) AS DATE_3_MNTHS_BACK;
SELECT ADD_MONTHS(CURRENT_DATE,5) AS DATE_5_MNTHS_AHEAD;

select datediff('day', '2022-06-01',CURRENT_DATE);
select datediff('day', '2022-07-23','2023-07-19');

select datediff('MONTH', '2021-06-01',CURRENT_DATE);
select datediff('YEAR', '2014-06-01',CURRENT_DATE);

select dateadd('day',-23,'2022-06-01');
select dateadd('month',-2,'2022-06-01');
select dateadd('year',-5,'2022-06-01');

select WEEK(CURRENT_DATE); -- FROM 1ST JAN 2022 HOW MNAY EEKS HAVE SURPASSED
select MONTH(CURRENT_DATE); -- -- FROM 1ST JAN 2022 HOW MNAY MONTHS HAVE SURPASSED

--1. Extracting Components of Date and Time
--Use Case: Extract specific parts (e.g., year, month, day) from a date or timestamp.

-- Extract Year, Month, Day from a Date
SELECT 
    YEAR(CURRENT_DATE) AS year, 
    MONTH(CURRENT_DATE) AS month, 
    DAY(CURRENT_DATE) AS day;
    
--2. Date Arithmetic
---Use Case: Add or subtract intervals from a date or timestamp.
-- Add 10 days to the current date
SELECT CURRENT_DATE + INTERVAL '10 DAY' AS future_date; 
SELECT CURRENT_DATE - INTERVAL '1 MONTH' AS PAST_MONTH;
SELECT CURRENT_DATE - INTERVAL '31 DAY' AS PAST_DAY;

-- Subtract 2 months from the current date
SELECT DATEADD(MONTH, -2, CURRENT_DATE) AS past_date;--PAST 2 MONTHS FROM CURRENT DATE
SELECT DATEADD(MONTH, 2, CURRENT_DATE) AS past_date;--  2 MONTHS AHEAD FROM CURRENT DATE

--3. Date Difference
--Use Case: Calculate the difference between two dates or timestamps.

-- Difference in days between two dates
SELECT DATEDIFF(DAY, '2024-01-01', CURRENT_DATE) AS days_diff;

-- Difference in months between two dates
SELECT DATEDIFF(MONTH, '2023-01-01', CURRENT_DATE) AS months_diff;

--4. Formatting Dates
--Use Case: Convert a date into a specific format string.

-- Format date as 'DD/MM/YYYY'
SELECT TO_CHAR(CURRENT_DATE, '') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'DD-MM-YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'DD/MM/YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MM/DD/YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MM-DD-YYYY') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM') AS formatted_date;
SELECT TO_CHAR(CURRENT_DATE, 'MM-DD-YY') AS formatted_date;

-- Format timestamp with hour, minute, and second
SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') AS formatted_timestamp;

--Truncating Date/Time
--Use Case: Truncate date/time to a specified precision (e.g., hour, day, month).

-- Truncate to start of the month
SELECT DATE_TRUNC('MONTH', CURRENT_DATE) AS month_start;

-- Truncate to start of the hour
SELECT DATE_TRUNC('HOUR', CURRENT_TIMESTAMP) AS hour_start;

--6. Handling Time Zones
--Use Case: Convert timestamps between time zones.
-- Convert current timestamp to 'America/New_York' timezone
SELECT CONVERT_TIMEZONE('UTC', 'America/New_York', CURRENT_TIMESTAMP) AS est_time;

-- Convert from one timezone to another
SELECT CONVERT_TIMEZONE('America/Los_Angeles', 'Europe/London', CURRENT_TIMESTAMP) AS london_time;

--7. Extracting Week Information
--Use Case: Get the week number or weekday from a date.
-- Get the week number of the year
SELECT WEEK(CURRENT_DATE) AS week_number;

-- Get the day of the week (0 = Sunday, 6 = Saturday)
SELECT DAYOFWEEK(CURRENT_DATE) AS day_of_week;

--8. Creating Date/Time Values
--Use Case: Create date or time values from components.
-- Create a date from year, month, and day
SELECT DATE_FROM_PARTS(2024, 9, 8) AS custom_date;

-- Create a timestamp from components
SELECT TIMESTAMP_FROM_PARTS(2024, 9, 8, 12, 30, 45) AS custom_timestamp;

--9. Working with Epoch Time
--Use Case: Convert between epoch time and a human-readable date.
-- Convert epoch time (seconds since 1970-01-01) to timestamp
SELECT TO_TIMESTAMP(1627764000) AS readable_timestamp;

-- Convert a timestamp to epoch seconds
SELECT EXTRACT(EPOCH_SECOND FROM CURRENT_TIMESTAMP) AS epoch_time;

--10. Adjusting Dates for Business Days
--Use Case: Add business days (excluding weekends) to a date.
-- Add 10 business days to the current date

SELECT DATEADD('day', 10, CURRENT_DATE) AS future_business_day;

--11. Comparing Timestamps
--Use Case: Compare two timestamps and find the difference in hours, minutes, etc.

-- Difference in hours between two timestamps




select datediff('MONTH', '2022-06-01',CURRENT_DATE);
select datediff('YEAR', '2014-06-01',CURRENT_DATE);

-- USE CASE PRACTICE
DROP TABLE orders;
CREATE TABLE orders (
    order_id INT PRIMARY KEY,                  -- Unique identifier for each order
    customer_name VARCHAR(100),                -- Name of the customer
    order_date DATE,                           -- Date when the order was placed
    delivery_date_time DATETIME                -- Date and time when the order was delivered
);

INSERT INTO orders (order_id, customer_name, order_date, delivery_date_time)
VALUES 
    (1, 'John Doe', '2024-01-15', '2024-01-17 12:30:45'),
    (2, 'Jane Smith', '2024-03-10', '2024-03-15 14:45:00'),
    (3, 'Mark Brown', '2024-07-22', '2024-07-23 09:15:30'),
    (4, 'Sarah Johnson', '2024-08-05', '2024-08-11 16:20:15'),
    (5, 'David Lee', '2024-12-01', '2024-12-10 18:05:25');

SELECT * FROM ORDERS;

-- Extracting Part of a Timestamp for Filtering
-- Use Case: Use EXTRACT to filter records based on specific parts of a timestamp.
-- Get all records created in 2024
SELECT * 
FROM orders 
WHERE EXTRACT(YEAR FROM order_date) = 2024;

-- Get all records created in September, regardless of the year
SELECT * 
FROM orders 
WHERE EXTRACT(MONTH FROM order_date) = 8;

-- Format delivery time as 'DD/MM/YYYY HH:MM:SS'
SELECT 
    order_id,
    customer_name,
    DATE_FORMAT(delivery_date_time, '%d/%m/%Y %H:%i:%s') AS formatted_delivery_time
FROM orders;

-- Truncate delivery time to the start of the hour
SELECT 
    order_id,
    customer_name,
    delivery_date_time,
    DATE_FORMAT(delivery_date_time, '%Y-%m-%d %H:00:00') AS truncated_delivery_time
FROM orders;


-- Extract Year, Month, and Day from order_date
DROP TABLE MASTER_ORDER;
CREATE TABLE MASTER_ORDER AS
SELECT 
    order_id,
    customer_name,
    order_date,
    delivery_date_time,
    EXTRACT(YEAR FROM order_date) AS order_year,
    EXTRACT(MONTH FROM order_date) AS order_month,
    EXTRACT(WEEK FROM order_date) AS order_week,
    EXTRACT(DAY FROM order_date) AS order_day,
    EXTRACT(DAY FROM delivery_date_time) AS delivery_day,
    DATEDIFF(delivery_date_time, order_date) AS days_to_delivery,
    TIMESTAMPDIFF(HOUR, order_date, delivery_date_time) AS time_taken_hrs_order_delivery,
    TIMESTAMPDIFF(MINUTE, order_date, delivery_date_time) AS time_taken_min_order_delivery,
    TIMESTAMPDIFF(SECOND, order_date, delivery_date_time) AS time_taken_sec_order_delivery
FROM orders;

SELECT * FROM MASTER_ORDER;

-- Add 5 days to the order date
SELECT 
    order_id,
    customer_name,
    order_date,
    order_date + INTERVAL 5 DAY AS delivery_due_date
FROM orders;

SELECT * FROM VW_MASTER_ORDER;

-- Create a datetime from components (year, month, day, hour, minute, second)
SELECT 
    order_id,
    customer_name,
    MAKEDATE(2024, 120) AS made_date,  -- 120th day of the year 2024
    MAKETIME(14, 30, 45) AS made_time  -- 14:30:45 time
FROM orders;


-- Convert delivery_time from UTC to 'America/New_York' timezone
SELECT 
    order_id,
    customer_name,
    delivery_date_time,
    CONVERT_TZ(delivery_date_time, '+00:00', 'America/New_York') AS ny_delivery_time
FROM orders;

-- Convert delivery_time to epoch time (seconds since 1970-01-01)
SELECT 
    order_id,
    customer_name,
    UNIX_TIMESTAMP(delivery_date_time) AS epoch_delivery_time
FROM orders;

-- Convert epoch time to human-readable datetime
SELECT 
    FROM_UNIXTIME(1627764000) AS readable_time;

SELECT 
    order_id, 
    customer_name, 
    delivery_date_time, 
    CONVERT_TZ(delivery_date_time, '+00:00', 'America/New_York') AS ny_delivery_time
FROM orders;

SELECT 
    order_id, 
    customer_name, 
    delivery_date_time, 
    CONVERT_TZ(delivery_date_time, '+00:00', 'Asia/Kolkata') AS india_delivery_time
FROM orders;

SELECT 
    TIMEDIFF(CONVERT_TZ('2024-03-10 12:00:00', '+00:00', 'Europe/London'), '2024-03-10 12:00:00') AS time_difference;

SELECT 
    CONVERT_TZ('2024-03-10 12:00:00', '+00:00', 'America/New_York') AS ny_time_before_dst,
    CONVERT_TZ('2024-07-10 12:00:00', '+00:00', 'America/New_York') AS ny_time_after_dst;

SELECT 
    order_id, 
    customer_name, 
    order_date, 
    delivery_date_time
FROM orders
WHERE CONVERT_TZ(delivery_date_time, '+00:00', 'Asia/Kolkata') > '2024-01-15 12:00:00';

-- Let’s start with setting the timezone in MySQL.
-- To see what value they are set to:
SELECT @@global.time_zone;
-- To set a value for it use either one:
SET GLOBAL time_zone = '+8:00';
SET GLOBAL time_zone = 'Europe/Helsinki';
SET @@global.time_zone = '+00:00';
SELECT @@global.time_zone;

-- To set it use either one:
SELECT @@session.time_zone;
SET time_zone = 'Europe/Helsinki';
SET time_zone = "+00:00";
SET @@session.time_zone = "+00:00";

-- The above query sets the session timezone to UTC. You can replace ‘+00:00’ with your desired timezone offset or a named timezone like ‘Europe/London’.
SET time_zone = '+00:00';

-- To get the current timezone offset as TIME
SELECT TIMEDIFF(NOW(), UTC_TIMESTAMP);
-- It will return 02:00:00 if your timezone is +2:00.

-- To get the current UNIX timestamp:
SELECT UNIX_TIMESTAMP(); -- 1725788312
SELECT UNIX_TIMESTAMP(NOW()); -- 1725788320

CREATE TABLE events (
    id INT PRIMARY KEY,
    event_name VARCHAR(50),
    event_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO events (id, event_name) VALUES (1, 'Event One');

-- Now, if you select data, the event_timestamp will reflect the timestamp of when the row was inserted, in the session’s timezone.
SELECT * FROM events;

SELECT CONVERT_TZ(event_timestamp, '+00:00', 'Europe/London') as london_time FROM events;

-- Let’s find all events that happened after 5 PM London time:
SELECT * FROM events
WHERE CONVERT_TZ(event_timestamp, '+00:00', 'Europe/London') > '17:00:00';

-- Though MySQL does not store timezone information within a TIMESTAMP column, you could store it in a separate column if needed:

ALTER TABLE events 
ADD COLUMN timezone VARCHAR(25);

SELECT TO_CHAR(TO_DATE('1998-05-01'),'MON,YYYY') AS MON_YEAR;
SELECT TO_CHAR(TO_DATE('1998-01-01'),'MON-YYYY');

SELECT TO_CHAR(TO_DATE('1998-01-01'),'MON-YYYY');

SELECT TO_DATE('1998-01-01') AS DATE;

SELECT to_date('08-23-2022','mm-dd-yyyy');

SELECT TO_DATE('1993-08-17') AS DATE;

ALTER TABLE ORDER
ADD COLUMN DELLIVERY_DATE:: TO_TIMESTAMP_TZ AS;

SELECT TO_CHAR(TO_DATE('1998-01-01'),'MM-YY');
